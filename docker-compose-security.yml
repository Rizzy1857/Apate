# Docker Compose for LLM-Honeypot (Mirage) - Security Hardened
# ==============================================================
# Orchestrates Python FastAPI, Rust echo server, and Go IoT stub.
# Creates a complete adaptive honeypot ecosystem with enhanced security.

version: '3.8'

services:
  # Python FastAPI Backend - Main honeypot orchestrator
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mirage-backend
    ports:
      - "8000:8000"  # Main API
      - "2222:2222"  # SSH honeypot
      - "8080:8080"  # HTTP honeypot
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app:ro  # Read-only mount
      - ./data:/app/data
      - honeypot-logs:/app/logs
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    networks:
      - honeypot-net
    restart: unless-stopped
    depends_on:
      - redis
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined  # Consider custom AppArmor profile
    read_only: false  # FastAPI needs write access for temp files
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/tmp:noexec,nosuid,size=100m
      - /app/logs:noexec,nosuid,size=500m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - DAC_OVERRIDE  # For log writing
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=honeypot-backend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust Protocol Server - Low-level network services
  rust-protocol:
    build:
      context: ./rust-protocol
      dockerfile: Dockerfile
    container_name: mirage-rust
    ports:
      - "7878:7878"  # TCP echo service
      - "7879:7879"  # Stats/monitoring
    environment:
      - RUST_LOG=info
      - BIND_ADDR=0.0.0.0:7878
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"
        labels: "service=honeypot-rust"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "7878"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Go IoT Services - Fake IoT device endpoints
  go-services:
    build:
      context: ./go-services
      dockerfile: Dockerfile
    container_name: mirage-iot
    ports:
      - "8081:8081"  # IoT device API
    environment:
      - PORT=8081
      - LOG_LEVEL=info
      - DEVICE_TYPE=camera_gateway
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"
        labels: "service=honeypot-iot"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/status"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: mirage-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass honeypot_redis_2023 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    user: "999:999"  # Redis user in Alpine
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=honeypot-redis"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "honeypot_redis_2023", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Security Monitoring Container (optional - enable for production)
  # security-monitor:
  #   image: falcosecurity/falco:latest
  #   container_name: mirage-security-monitor
  #   privileged: true
  #   pid: host
  #   volumes:
  #     - /var/run/docker.sock:/host/var/run/docker.sock
  #     - /dev:/host/dev
  #     - /proc:/host/proc:ro
  #     - /boot:/host/boot:ro
  #     - /lib/modules:/host/lib/modules:ro
  #     - /usr:/host/usr:ro
  #   networks:
  #     - honeypot-net
  #   restart: unless-stopped
  #   command: ["falco", "--modern-bpf"]
  #   environment:
  #     - FALCO_BPF_PROBE=""

  # Optional: Prometheus for metrics collection
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: mirage-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - honeypot-net
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   user: "65534:65534"

networks:
  honeypot-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: "mirage-br0"
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  honeypot-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

# Security Notes:
# ===============
# 1. All containers run as non-root users
# 2. Read-only filesystems where possible
# 3. Dropped capabilities with minimal additions
# 4. Resource limits to prevent DoS
# 5. Enhanced logging for security monitoring
# 6. Network isolation and disabled inter-container communication
# 7. Proper volume mounting with security constraints
# 8. Health checks for service availability monitoring
#
# Production Deployment:
# ======================
# 1. Run the security_hardening.sh script before deployment
# 2. Enable security monitoring services (Falco, etc.)
# 3. Configure external log shipping to SIEM
# 4. Set up proper SSL/TLS termination with reverse proxy
# 5. Implement secrets management (Vault, etc.)
# 6. Configure backup and disaster recovery procedures
