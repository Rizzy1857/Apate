name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install black ruff mypy
    
    - name: Lint with ruff
      run: |
        ruff check backend/ tests/ --output-format=github
    
    - name: Format check with black
      run: |
        black --check --diff backend/ tests/
    
    - name: Type check with mypy
      run: |
        mypy backend/app/ --ignore-missing-imports
    
    - name: Run Python tests
      run: |
        cd ${{ github.workspace }}
        python -m pytest tests/ -v --tb=short

  rust-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust-protocol/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('rust-protocol/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Format check
      run: |
        cd rust-protocol
        cargo fmt --all -- --check
    
    - name: Lint with clippy
      run: |
        cd rust-protocol
        cargo clippy -- -D warnings
    
    - name: Run Rust tests
      run: |
        cd rust-protocol
        cargo test --verbose

  integration-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, rust-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: apate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/apate_test
      run: |
        python test_integration.py

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security scan with bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
    
    - name: Check dependencies with safety
      run: |
        pip install -r backend/requirements.txt
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
