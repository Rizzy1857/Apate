# Docker Compose for LLM-Honeypot (Mirage)
# =========================================
# Orchestrates Python FastAPI, Rust echo server, and Go IoT stub.
# Creates  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mirage-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass honeypot_redis_2023 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    user: "999:999"  # Redis user in Alpine
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 384M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
        labels: "service=honeypot-redis"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "honeypot_redis_2023", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3ive honeypot ecosystem.

version: '3.8'

services:
  # Python FastAPI Backend - Main honeypot orchestrator
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mirage-backend
    ports:
      - "8000:8000"  # Main API
      - "2222:2222"  # SSH honeypot
      - "8080:8080"  # HTTP honeypot
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app:ro  # Read-only mount
      - ./data:/app/data
      - honeypot-logs:/app/logs
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    networks:
      - honeypot-net
    restart: unless-stopped
    depends_on:
      - redis
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined  # Consider custom AppArmor profile
    read_only: false  # FastAPI needs write access for temp files
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/tmp:noexec,nosuid,size=100m
      - /app/logs:noexec,nosuid,size=500m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - DAC_OVERRIDE  # For log writing
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
        labels: "service=honeypot-backend"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Rust Protocol Server - Low-level network services
  rust-protocol:
    build:
      context: ./rust-protocol
      dockerfile: Dockerfile
    container_name: mirage-rust
    ports:
      - "7878:7878"  # TCP echo service
      - "7879:7879"  # Stats/monitoring
    environment:
      - RUST_LOG=info
      - BIND_ADDR=0.0.0.0:7878
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/tmp:noexec,nosuid,size=50m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "7878"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Go IoT Services - Fake IoT device endpoints
  go-services:
    build:
      context: ./go-services
      dockerfile: Dockerfile
    container_name: mirage-iot
    ports:
      - "8081:8081"  # IoT device API
    environment:
      - PORT=8081
      - LOG_LEVEL=info
      - DEVICE_TYPE=camera_gateway
    networks:
      - honeypot-net
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    user: "1000:1000"
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Enhanced logging
    logging:
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "3"
        labels: "service=honeypot-iot"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/status"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis for session storage and caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mirage-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass honeypot_redis_2023
    volumes:
      - redis_data:/data
    networks:
      - honeypot-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # ELK Stack for log aggregation (optional - for production)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
  #   container_name: mirage-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elastic_data:/usr/share/elasticsearch/data
  #   networks:
  #     - honeypot-net

  # Prometheus for metrics collection (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: mirage-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - honeypot-net

networks:
  honeypot-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  elastic_data:
    driver: local

# Production considerations:
# - Add resource limits for each service
# - Configure proper logging drivers
# - Set up external volume mounts for persistence
# - Add environment-specific override files
# - Configure reverse proxy (nginx/traefik) for production
